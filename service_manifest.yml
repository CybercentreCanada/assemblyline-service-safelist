name: Safelist
version: $SERVICE_TAG
description: >
  ALv4 Safelist service

  This service will check the file hashes against Assemblyline's internal safelist infrastructure and mark
  files as safe accordingly.

accepts: .*
rejects: empty|metadata/.*

stage: FILTER
category: Filtering

file_required: false
timeout: 10
disable_cache: false

enabled: true

config:
  cache_timeout_seconds: 1800
  lookup_md5: false
  lookup_sha1: true
  lookup_sha256: true

docker_config:
  image: ${REGISTRY}cccs/assemblyline-service-safelist:$SERVICE_TAG
  cpu_cores: 0.4
  ram_mb: 256

heuristics:
  - heur_id: 1
    name: Safelisted by external source
    score: -1000
    filetype: "*"
    description: Hash is found in an external source of know good files
  - heur_id: 2
    name: Safelisted by user
    score: -1000
    filetype: "*"
    description: A user of this system found this file to be safe

dependencies:
  updates:
    container:
      allow_internet_access: true
      command: ["python", "-m", "update_server"]
      image: ${REGISTRY}cccs/assemblyline-service-safelist:$SERVICE_TAG
      ports: ["5003"]
      # Upper-bound, adjust based on sources
      # cpu_cores: 2
      # ram_mb: 4096
    run_as_core: True

update_config:
  update_interval_seconds: 86400
  wait_for_update: false
  generates_signatures: false
  sources:
    []
    # We will not force a safelist onto our users.
    # Here are examples of NSRL sources that are working with the updater:
    # - name: NSRL_modernm
    #   pattern: rds_modernm/NSRLFile.txt
    #   uri: https://s3.amazonaws.com/rds.nsrl.nist.gov/RDS/current/rds_modernm.zip
    # - name: NSRL_android
    #   pattern: NSRLFile.txt
    #   uri: https://s3.amazonaws.com/rds.nsrl.nist.gov/RDS/current/RDS_android.iso
    # - name: NSRL_legacy
    #   pattern: NSRLFile.txt
    #   uri: https://s3.amazonaws.com/rds.nsrl.nist.gov/RDS/current/RDS_legacy.iso
